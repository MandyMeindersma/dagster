import textwrap
from collections.abc import Iterator
from contextlib import ExitStack
from pathlib import Path

from dagster_dg_core.utils import activate_venv

from docs_snippets_tests.snippet_checks.guides.components.utils import (
    DAGSTER_ROOT,
    EDITABLE_DIR,
)
from docs_snippets_tests.snippet_checks.utils import (
    compare_tree_output,
    isolated_snippet_generation_environment,
)

MASK_MY_PROJECT = (r" \/.*?\/my-project", " /.../my-project")
MASK_VENV = (r"Using.*\.venv.*", "")
MASK_USING_LOG_MESSAGE = (r"Using.*\n", "")

SNIPPETS_DIR = (
    DAGSTER_ROOT
    / "examples"
    / "docs_snippets"
    / "docs_snippets"
    / "guides"
    / "components"
    / "integrations"
    / "python-script-component"
)


def test_components_docs_python_script(
    update_snippets: bool,
    update_screenshots: bool,
    get_selenium_driver,
) -> None:
    with (
        isolated_snippet_generation_environment(
            should_update_snippets=update_snippets,
            snapshot_base_dir=SNIPPETS_DIR,
            global_snippet_replace_regexes=[
                MASK_VENV,
                MASK_USING_LOG_MESSAGE,
                MASK_MY_PROJECT,
            ],
        ) as context,
        ExitStack() as stack,
    ):
        # Scaffold code location
        context.run_command_and_snippet_output(
            cmd="create-dagster project my-project --uv-sync --use-editable-dagster && cd my-project/src",
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-scaffold-project.txt",
            snippet_replace_regex=[
                ("--uv-sync --use-editable-dagster ", ""),
                ("create-dagster project", "dg create"),
            ],
            print_cmd="dg create my-project\ncd my-project",
            ignore_output=True,
        )

        stack.enter_context(activate_venv("../.venv"))

        # Scaffold python script component
        context.run_command_and_snippet_output(
            cmd="dg scaffold defs dagster.PythonScriptComponent generate_revenue_report",
            snippet_path=SNIPPETS_DIR
            / f"{context.get_next_snip_number()}-scaffold-python-script-component.txt",
        )

        # Tree the project
        context.run_command_and_snippet_output(
            cmd="tree my_project/defs",
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-tree.txt",
            custom_comparison_fn=compare_tree_output,
        )

        # Create the Python script (simple version)
        context.create_file(
            Path("my_project") / "defs" / "generate_revenue_report" / "process_sales_data.py",
            contents=textwrap.dedent(
                """\
                import pandas as pd

                # Sample sales data (in a real scenario, this might come from a database or file)
                sales_data = {
                    "date": ["2024-01-01", "2024-01-02", "2024-01-03"],
                    "product": ["A", "B", "A"],
                    "quantity": [10, 5, 8],
                    "price": [100.0, 200.0, 100.0],
                }

                df = pd.DataFrame(sales_data)
                df["revenue"] = df["quantity"] * df["price"]

                # Calculate total revenue
                total_revenue = df["revenue"].sum()

                print(f"Generated revenue report with total revenue: ${total_revenue}")
                print(f"Number of transactions: {len(df)}")
                print(f"Average transaction: ${df['revenue'].mean():.2f}")
                """
            ),
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-process-sales-data.py",
        )

        # Update the component configuration
        context.create_file(
            Path("my_project") / "defs" / "generate_revenue_report" / "defs.yaml",
            contents=textwrap.dedent(
                """\
                type: dagster.PythonScriptComponent

                attributes:
                  execution:
                    path: process_sales_data.py
                  assets:
                    - key: sales_revenue_report
                      description: "Daily sales revenue report generated from transaction data"
                      group_name: "analytics"
                      kinds: ["python", "report"]
                """
            ),
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-customized-component.yaml",
        )

        # List definitions to show the asset
        context.run_command_and_snippet_output(
            cmd="dg list defs",
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-list-defs.txt",
        )

        # Create advanced configuration examples are referenced by the documentation
        # but not generated by the test since they're static examples

        # Create subdirectory example (no snippet needed - just prep)
        context.run_command_and_snippet_output(
            cmd="mkdir -p my_project/defs/generate_revenue_report/scripts my_project/defs/generate_revenue_report/utils",
            ignore_output=True,
        )

        # Move script to subdirectory (no snippet needed - just prep)
        context.run_command_and_snippet_output(
            cmd="mv my_project/defs/generate_revenue_report/process_sales_data.py my_project/defs/generate_revenue_report/scripts/",
            ignore_output=True,
        )

        # Update component to reference script in subdirectory
        context.create_file(
            Path("my_project") / "defs" / "generate_revenue_report" / "defs.yaml",
            contents=textwrap.dedent(
                """\
                type: dagster.PythonScriptComponent

                attributes:
                  execution:
                    path: scripts/process_sales_data.py
                  assets:
                    - key: sales_revenue_report
                """
            ),
            snippet_path=SNIPPETS_DIR / f"{context.get_next_snip_number()}-subdirectory-component.yaml",
        )

        # Test generates the renamed launch file
        context.check_file_exists(
            SNIPPETS_DIR / "5-launch.txt"  # File was renamed from 12-launch.txt to 5-launch.txt
        )